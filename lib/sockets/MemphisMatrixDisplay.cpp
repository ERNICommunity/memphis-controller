/*
 * MemphisMatrixDisplay.cpp
 *
 *  Created on: 29.05.2016
 *      Author: niklausd
 */

#include <Adafruit_GFX.h>
#include <gfxfont.h>
#include <Fonts/TomThumb.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
#include <MemphisMatrixDisplay.h>
#include <Timer.h>

//-----------------------------------------------------------------------------

class HeartAnimationTimerAdapter : public TimerAdapter
{
private:
  MemphisMatrixDisplay* m_matrixDisplay;
public:
  HeartAnimationTimerAdapter(MemphisMatrixDisplay* matrixDisplay)
  : m_matrixDisplay(matrixDisplay)
  { }

  void timeExpired()
  {
    if (0 != m_matrixDisplay)
    {
      m_matrixDisplay->showNextFrame();
    }
  }
};

//-----------------------------------------------------------------------------

typedef enum
{
  CS_green = 0,
  CS_red   = 1,
  CS_blue  = 2
} ColorSelection;

const uint16_t colors[] =
{ Adafruit_NeoMatrix::Color(255, 0, 0), Adafruit_NeoMatrix::Color(0, 255, 0), Adafruit_NeoMatrix::Color(0, 0, 255) };

const unsigned char heartbeatingRedFrame0[16*16] = {};
const unsigned char heartbeatingGreenFrame0[16*16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const unsigned char heartbeatingBlueFrame0[16*16] = {};
const unsigned char heartbeatingRedFrame1[16*16] = {};
const unsigned char heartbeatingGreenFrame1[16*16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const unsigned char heartbeatingBlueFrame1[16*16] = {};
const unsigned char heartbeatingRedFrame2[16*16] = {};
const unsigned char heartbeatingGreenFrame2[16*16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const unsigned char heartbeatingBlueFrame2[16*16] = {};
const unsigned char heartbeatingRedFrame3[16*16] = {};
const unsigned char heartbeatingGreenFrame3[16*16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const unsigned char heartbeatingBlueFrame3[16*16] = {};

MemphisMatrixDisplay::MemphisMatrixDisplay(uint8_t pin)
: Adafruit_NeoMatrix(16, 16, pin, NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG, NEO_GRB + NEO_KHZ800)
, m_heartBeatRate(0)
, m_heartAnimationTimer(new Timer(new HeartAnimationTimerAdapter(this), Timer::IS_RECURRING))
, m_frame(0)
, m_isDisplayActive(false)
{
  begin();
  setTextWrap(false);
  setBrightness(10);
  setFont(&TomThumb);
  setTextColor(colors[CS_blue]);
}

MemphisMatrixDisplay::~MemphisMatrixDisplay()
{
  delete m_heartAnimationTimer->adapter();
  m_heartAnimationTimer->attachAdapter(0);

  delete m_heartAnimationTimer;
  m_heartAnimationTimer = 0;
}

void MemphisMatrixDisplay::setHeartBeatRate(unsigned int heartBeatRate)
{
  m_heartBeatRate = heartBeatRate;
  if (0 != m_heartAnimationTimer)
  {
    m_heartAnimationTimer->startTimer((60000 / heartBeatRate) / 4);
  }
  updateDisplay();
}

void MemphisMatrixDisplay::showNextFrame()
{
  m_frame++;
  if (0 == (m_frame % 4))
  {
    m_frame = 0;
  }
  updateDisplay();
}

void MemphisMatrixDisplay::updateDisplay()
{
  if (m_isDisplayActive)
  {
    fillScreen(0);
    updateHeart();
    updateText();
    show();
  }
}

void MemphisMatrixDisplay::updateText()
{
  setCursor(4, 10);
  print(String(m_heartBeatRate));
}

uint16_t MemphisMatrixDisplay::drawRGB24toRGB565(byte r, byte g, byte b)
{
  return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

void MemphisMatrixDisplay::updateHeart()
{
  if (m_frame == 0)
  {
    for (byte y = 0; y < 16; y++)
    {
      for (byte x = 0; x < 16; x++)
      {
        byte loc = x + y * 16;
        drawPixel(x, y,
            drawRGB24toRGB565((heartbeatingRedFrame0[loc]),
                (heartbeatingGreenFrame0[loc]), (heartbeatingBlueFrame0[loc])));
      }
    }
  }
  else if (m_frame == 1)
  {
    for (byte y = 0; y < 16; y++)
    {
      for (byte x = 0; x < 16; x++)
      {
        byte loc = x + y * 16;
        drawPixel(x, y,
            drawRGB24toRGB565((heartbeatingRedFrame1[loc]),
                (heartbeatingGreenFrame1[loc]), (heartbeatingBlueFrame1[loc])));
      }
    }
  }
  else if (m_frame == 2)
  {
    for (byte y = 0; y < 16; y++)
    {
      for (byte x = 0; x < 16; x++)
      {
        byte loc = x + y * 16;
        drawPixel(x, y,
            drawRGB24toRGB565((heartbeatingRedFrame2[loc]),
                (heartbeatingGreenFrame2[loc]), (heartbeatingBlueFrame2[loc])));
      }
    }
  }
  else if (m_frame == 3)
  {
    for (byte y = 0; y < 16; y++)
    {
      for (byte x = 0; x < 16; x++)
      {
        byte loc = x + y * 16;
        drawPixel(x, y,
            drawRGB24toRGB565((heartbeatingRedFrame3[loc]),
                (heartbeatingGreenFrame3[loc]), (heartbeatingBlueFrame3[loc])));
      }
    }
  }
}

void MemphisMatrixDisplay::activateDisplay()
{
  m_isDisplayActive = true;
  setTextColor(colors[CS_blue]);
  updateDisplay();
}

void MemphisMatrixDisplay::deactivateDisplay()
{
//  m_isDisplayActive = false;
//  fillScreen(0);
//  show();
  setTextColor(colors[CS_red]);
  updateDisplay();
}
